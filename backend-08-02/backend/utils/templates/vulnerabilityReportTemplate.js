exports.getVulnerabilityHTML = ({ vendor, product, results }) => {
  const getSeverityColors = (severity) => {
    switch (severity?.toLowerCase()) {
      case 'critical': return { border: '#b91c1c', bg: '#fee2e2', text: '#b91c1c' };
      case 'high': return { border: '#ef4444', bg: '#fee2e2', text: '#b91c1c' };
      case 'medium': return { border: '#f59e0b', bg: '#fef3c7', text: '#92400e' };
      case 'low': return { border: '#3b82f6', bg: '#dbeafe', text: '#1e40af' };
      default: return { border: '#9ca3af', bg: '#f3f4f6', text: '#374151' };
    }
  };

  const now = new Date().toLocaleString();

  const cards = results.map((item, idx) => {
   
    // If the item has a 'Doc' property (from MongoDB export), use that
 const vulnData = item._doc || item.docs || item;

   
    const severity = vulnData.base_Severity || vulnData.severity || 'unknown';
    const colors = getSeverityColors(severity);
   
    // Use CVE ID or title as the main identifier
    const displayKey = vulnData.cve_id || vulnData.cve || vulnData.advisoryId || vulnData.title || vulnData.name || `Vulnerability ${idx + 1}`;

    // Filter out MongoDB-specific and unwanted fields
    const relevantFields = Object.entries(vulnData)
      .filter(([key, value]) => {
        // Exclude MongoDB and internal fields
        const excludedFields = [
          '_id', '__v', 'product', 'storedAt', '$', '$isNew', 'docs',
          'activePaths', 'skipId', 'states', 'paths'
        ];
       
        // Only include fields that have meaningful values
        return !excludedFields.includes(key) &&
               value !== null &&
               value !== undefined &&
               value !== '' &&
               typeof value !== 'object'; // Exclude complex objects
      });

    const detailRows = relevantFields.map(([key, val]) => {
      const formattedKey = key
        .split('_')
        .map(word => word.charAt(0).toUpperCase() + word.slice(1))
        .join(' ');
     
      let displayVal = val;
     
      // Format dates nicely
      if (key.includes('date') || key.includes('Date')) {
        try {
          displayVal = new Date(val).toLocaleDateString();
        } catch (e) {
          displayVal = val;
        }
      }
     
      // Truncate very long descriptions
      if (key === 'description' && displayVal.length > 200) {
        displayVal = displayVal.substring(0, 200) + '...';
      }
     
      // Make links clickable
      if (key === 'link' || key.includes('url')) {
        displayVal = `<a href="${val}" target="_blank" style="color: #0273e6; text-decoration: none;">${val}</a>`;
      }
     
      return `<p style="margin: 4px 0;"><strong>${formattedKey}:</strong> ${displayVal}</p>`;
    }).join('');

    return `
      <div style="border: 1px solid ${colors.border}; border-radius: 8px; margin-bottom: 20px;">
        <div style="background-color: ${colors.bg}; color: ${colors.text}; padding: 8px 12px; border-top-left-radius: 8px; border-top-right-radius: 8px; font-weight: bold;">
          ${displayKey}
        </div>
        <div style="padding: 10px 12px; color: #374151; font-size: 14px;">
          ${detailRows || '<p style="color: #666;">No additional details available.</p>'}
        </div>
      </div>
    `;
  }).join('');

  return `
    <html>
      <head>
        <meta charset="UTF-8">
        <title>${vendor.toUpperCase()} - ${product} Report</title>
        <style>
          body {
            font-family: Arial, sans-serif;
            margin: 40px;
            line-height: 1.5;
          }
          a:hover {
            text-decoration: underline !important;
          }
        </style>
      </head>
      <body>
        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 30px;">
          <div style="color: #0273e6; font-size: 24px; font-weight: bold;">Cyber Alerter</div>
          <div style="font-size: 14px; color: #555;">${now}</div>
        </div>
        <h2 style="margin-bottom: 20px; color: #333;">${vendor.toUpperCase()} - ${product.toUpperCase()}</h2>
        <div style="margin-bottom: 20px; color: #666; font-size: 14px;">
          Total vulnerabilities found: ${results.length}
        </div>
        ${cards || '<p>No vulnerability data available.</p>'}
      </body>
    </html>
  `;
};